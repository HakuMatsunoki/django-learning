name: qa

on:
  push:
    branches:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env
          echo "DJANGO_DEBUG=${{ vars.DJANGO_DEBUG }}" >> .env
          echo "DJANGO_LOGGING_LEVEL=${{ vars.DJANGO_LOGGING_LEVEL }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> .env
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env
          echo "ACCESS_TOKEN_LIFETIME_HOURS=${{ vars.ACCESS_TOKEN_LIFETIME_HOURS }}" >> .env
          echo "REFRESH_TOKEN_LIFETIME_DAYS=${{ vars.REFRESH_TOKEN_LIFETIME_DAYS }}" >> .env

      - name: Set pip cache dir
        run: |
          mkdir -p ~/.cache/pip
          echo "PIP_CACHE_DIR=~/.cache/pip" >> $GITHUB_ENV

      - name: Cache dependencies
        id: pip-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Check if cache used
        run: echo "${{ steps.pip-cache.outputs.cache-hit }}"

      - name: Launch Docker Compose
        run: docker compose up -d

      - name: Run migrations
        run: |
          docker compose exec -T api python manage.py makemigrations
          docker compose exec -T api python manage.py migrate

      - name: Ruff linting
        run: docker compose exec -T api ruff check .

      - name: Run tests
        run: docker compose exec -T api python manage.py test

      - name: Stop Docker Compose
        run: docker compose down
